【镜像(Image)】
Docker提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。镜像可以用来创建Docker容器。
【容器(Container)】
容器是从镜像创建的运行实例。它可以被启动、开始、停止、 删除。每个容器都是相互隔离的、保证安全的平台。
【仓库(Repository)】
仓库是集中存放镜像文件的场所。仓库分为公开仓库(Public)和私有仓库(Private)两种形式。
【阿里云镜像】
https://cr.console.aliyun.com/cn-hangzhou/instances/images
342539587@qq.com

【centos上docker安装】
sudo yum update -y
https://www.runoob.com/docker/centos-docker-install.html
vim /etc/docker/daemon.json
{
  "registry-mirrors": ["https://in7voitv.mirror.aliyuncs.com"]
}


【docker服务】
systemctl start docker   启动
systemctl stop docker    停止
systemctl restart docker 重启
systemctl enable docker  设置开机启动
systemctl status docker  查看docker状态

【镜像操作】
docker images            查看所有镜像
docker pull centos       下载centos镜像
docker rmi 镜像id        删除镜像
docker search --no-trunc centos                 查找相关镜像
docker tag IMAGE_ID jimmycentos:v3.0            重命名镜像名称
docker commit centos7 new_image_centos7:v1.0    保存现有镜像(修改端口映射可通过先保存镜像再创建容器解决)
docker save imageID > /home/centos7_update.jar  保存镜像到本地
docker load < /home/xxx.jar                     加载备份文件到镜像

【容器操作】
docker ps                查看运行的容器
docker ps -a             查看所有容器
docker update --restart=always container-id 设置容器自动启动
docker update --restart=no container-id     设置容器不自动启动
docker start container-name/container-id    启动容器
docker stop container-name/container-id     停止容器
docker logs container-name/container-id     容器日志
docker rm container-name/container-id       删除容器
docker rename JimmyCentos JimmyCentos7      重命名容器名称
docker logs --tail 50 container-id          查看最新50行日志
docker run -itd -p 8080:8080 --privileged=true --name centos7 imageID /usr/sbin/init  创建并运行容器
docker exec -it -u root container-name/container-id /bin/bash    以root用户进入容器
docker cp container-id:容器文件路径 本地路径                     文件传输(容器 -> 本机)
docker cp 本地文件路径 container-id:容器路径                     文件传输(本机 -> 容器)


【添加容器端口映射】注意是否关闭防火墙或者添加防火墙端口
systemctl stop docker
cd /var/lib/docker/containers/[容器ID]
vi hostconfig.json      #添加需要映射的端口
vi config.v2.json       #添加需要映射的端口
systemctl start docker

systemctl status firewalld.service                             #查看防火墙状态
systemctl start firewalld.service                              #开启防火墙(临时)
systemctl enable firewalld.service                             #开启防火墙(开机启动)
systemctl restart firewalld.service                            #重启防火墙
systemctl stop firewalld.service                               #关闭防火墙(临时)
systemctl disable firewalld.service                            #关闭防火墙(永久)
firewall-cmd --zone=public --add-port=2181/tcp --permanent     #添加开放端口
firewall-cmd --zone=public --remove-port=2181/tcp --permanent  #移除开放端口
netstat -anpt                                                  #查看端口状态
lsof -i:8080                                                   #查看8080端口是否占用


【docker容器更新时间】
docker cp /etc/localtime  container-id:/etc/
若报错，则使用下面指令
docker cp /usr/share/zoneinfo/Asia/Shanghai container-id:/etc/localtime

【docker部署jenkins】
sudo mkdir -p /var/jenkins_mount
chmod 777 /var/jenkins_mount
sudo docker run -u root -d -p 8080:8080 -p 50000:50000 -v /var/jenkins_mount:/var/jenkins_home -v /etc/localtime:/etc/localtime --name Jenkins jenkinsci/blueocean 
插件镜像地址
https://mirrors.aliyun.com/jenkins/updates/update-center.json

【docker上分布式locust】
https://docs.locust.io/en/stable/running-locust-docker.html#running-your-tests
#单独运行： /locustfile为本地test.py对应文件夹路径,test.py为locust脚本,TARGET_URL为压测网站地址,locustio/locust为docker镜像;
docker run -p 18089:8089 --volume /locustfile:/mnt/locust -e LOCUSTFILE_PATH=/mnt/locust/test.py -e TARGET_URL=IP locustio/locust
#主从模式-master： 端口18089为locust访问端口,端口5557、5558为主从默认通信端口;
docker run -p 18089:8089 -p 5557:5557 -p 5558:5558 --volume /locustfile:/mnt/locust -e LOCUSTFILE_PATH=/mnt/locust/test.py -e TARGET_URL=IP -e LOCUST_MODE=master --name master locustio/locust
#主从模式-slave：  修改本机映射对应端口不一致即可,可以多个slave,LOCUST_MASTER_HOST为测试机对应地址;
docker run -p 18090:8089 --volume /locustfile:/mnt/locust -e LOCUSTFILE_PATH=/mnt/locust/test.py -e TARGET_URL=IP -e LOCUST_MODE=slave -e LOCUST_MASTER_HOST=IP locustio/locust

【docker上分布式seleinum】
https://www.cnblogs.com/tynam/p/12713506.html
#创建hub
docker run -d -p 4444:4444 -e GRID_MAX_SESSION=100 --name selenium-hub selenium/hub
#创建node-chrome
docker run -d -p 5555:5555 -e NODE_MAX_INSTANCES=5 -e NODE_MAX_SESSION=5 --shm-size=2g --link selenium-hub:hub --name node-chrome selenium/node-chrome
#创建node-firefox
docker run -d -p 5556:5555 -e NODE_MAX_INSTANCES=5 -e NODE_MAX_SESSION=5 --shm-size=2g --link selenium-hub:hub --name node-firefox selenium/node-firefox
#创建node-opera
docker run -d -p 5557:5555 -e NODE_MAX_INSTANCES=5 -e NODE_MAX_SESSION=5 --shm-size=2g --link selenium-hub:hub --name node-opera selenium/node-opera
#VNC (Virtual Network Console)是虚拟网络控制台的缩写,可查看执行界面
下载地址：https://www.realvnc.com/en/connect/download/viewer/
打开后输入访问的机器IP，会要求输入密码，默认密码为 secret


