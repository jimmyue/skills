TPS=VU/(RT+Thinktime)

【性能测试的意义】
1）能够有效评估系统的性能指标，用于系统的性能评估；
2）能够识别系统的性能瓶颈，协助性能调优；
3）能够指导突发流量承载方案的制定；
4）能够用于系统运维成本的预算；

性能指标剖析
【响应时间】
用户通过客户端向服务端发出请求的时间为： T1
服务端接收到请求，处理该请求的时间为：T2
服务端返回数据给客户端时间为： T3
客户端接收到响应数据，处理数据呈现给用户时间为：T4
服务器视角： Ts=T2
系统视角：   Ts=T1+T2+T3
用户视角：   Tu=T1+T2+T3+T4
大多数情况下，我们用jmeter做性能测试的响应时间都以用户视角去看待。
【并发数】VU
广义：单位时间内同时发送给服务器的请求数，不限定具体业务类型，强调的是同时发送
狭义：是单位时间内同时发送给服务器的相同的业务请求数，需限定具体的业务类型，强调业务请求相同
服务端视角：并发数为单位时间内服务端接收到的请求数
客户端视角：客户端的某个具体业务行为包括多个请求， 并发数可被理解为客户端单位时间内同时发送给服务器端的请求数
用户视角：客户端的业务请求一般为用户操作行为，并发数也可理解为并发用户数，又可称为虚拟用户数
【吞吐量】Throughput
Rps-请求数/单位时间：通常用来描述施压引擎实际发出的压力大小(并发数=rps*单次消耗时间)
Hps-点击数/单位时间：每秒点击数
Tps-通过事物数/单位时间：一个事务是指向服务器发送请求然后服务器做出反应的过程
Qps-查询数/单位时间：一个TPS一般包含多个QPS
【CPU使用率】
CPU 指标主要指的 CPU利用率，包括用户态(user)、系统态(sys)、等待态(wait)、空闲态(idle)
CPU利用率要低于业界警戒值范围之内，即小于或者等于 75%
衡量标准：注意>=50%；告警>=70%；严重>=90%
Cpu瓶颈征兆：
响应时间很慢（slow response time）
CPU 空闲时间为零（zero percent idle CPU）
过高的系统占用 CPU 时间（high percent system CPU）
过高的用户占用 CPU 时间（high ercent user CPU）
长时间的有很长的运行进程队列（large run queue size sustainedover time）
【内存利用率】
一般情况下， SWAP交换空间利用率要低于 70%
内存利用率=（1-空闲内存/总内存大小）*100%
衡量标准：注意>=50%；告警>=70%；严重>=80%
内存瓶颈征兆：
1、进程进入不活动状态；
2、交换区所有磁盘的活动次数很高；
3、很高的 CPU 利用率；
4、内存溢出（OOM）
【磁盘I/O】
一般情况下，磁盘繁忙率要低于 70%。如果该参数值一直很高，表明 I/O 有问题，可以考虑更换更快的硬盘系统。
衡量标准：注意>=40%；告警>=60%；严重>=80%
磁盘瓶颈征兆：
过高的磁盘利用率（high disk utilization）
太长的磁盘等待队列（large disk queue length）
等待磁盘 I/O 的时间所占的百分率太高（large percentage of timewaiting for disk I/O）
太高的物理 I/O 速率：large physical I/O rate(not sufficient initself)
过低的缓存命中率（low buffer cache hit ratio(not sufficient initself))
太长的运行进程队列，但 CPU 却空闲（large run queue with idleCPU）
【网络宽带】
一般使用计数器 Bytes Total/sec 来度量，其表示为发送和接收字节的速率，包括帧字符在内
衡量标准：1.收发包的吞吐率达到网卡上限；2.有延迟；3.有丢包；4.有阻塞

性能测试类型
【基准测试】
基准测试是每次对外发布产品版本前必须要完成的测试类型。
通过执行固定的性能测试场景得到系统的性能测试报告，然后与上一版本发布时的基准测试结果进行对比，如果发现指标有“恶化”的趋势，就需要进一步排查问题
目的：
1、获取系统性能基准作为参照物（性能问题发生后的测试很难了解系统性能基准）
2、识别系统或环境的配置变更对性能带来的影响
3、给系统优化前后的性能提升/下降提供参考标准
4、观察系统的整体性能趋势与性能拐点，识别系统性能风险
【负载测试】
1、持续稳定地增加系统的负载，测试系统性能的变化。直到性能指标达到阈值，找到系统瓶颈和性能拐点
2、测试系统所能承受的最大负载量的测试
3、找出内存管理错误，内存泄漏，缓冲区溢出等问题
4、找到处理极限，为调优提供数据
5、负载测试是通过改变系统负载方式、增加负载等来发现系统中所存在的性能问题。它是一种测试方法，可以被压力测试所采用。
【压力测试】
1、测试系统的资源在达到饱和状态下，应用的处理会话能力
2、持续稳定的增加系统负载，测试系统性能的变化，并最终确定在什么负载下系统性能处于失效状态
3、它的目的是确保系统失败并正常恢复，目的是发现在什么条件下系统的性能变得不可接受，发现应用程序性能下降的拐点
4、有效地发现系统稳定性的隐患和系统在负载峰值的条件下功能隐患等
5、关注大业务量情况下长时间运行系统性能的变化（例如是否反应变慢、是否会内存泄漏导致系统逐渐崩溃、是否能恢复）
【稳定性测试】
主要是通过长时间（7*24 小时）模拟被测系统的测试负载，来观察系统在长期运行过程中是否有潜在的问题。
通过对系统指标的监控，稳定性测试可以发现诸如内存泄漏、资源非法占用等问题
一般是采用“阶梯增压”的方法，通过的标志
1、系统资源的所有监控指标稳定
2、事务的响应时间不稳定
3、事务的错误率不超过 1%
【并发测试】
并发测试，是在高并发情况下验证单一业务功能的正确性以及性能的测试手段。
并发测试一般使用思考时间为零的虚拟用户脚本来发起具有“集合点”的测试。
并发测试，往往被当作功能测试的补充，主要用于发现诸如多线程、资源竞争、
资源死锁之类的错误。要执行并发测试，需要加入“集合点”
【Spike测试】
尖峰测试（Spike testing）在性能测试中属于压力测试的一个子集。指的是在某一瞬间或者多个频次下用户数和压力陡然增加的场景。
为了验证我们的网站在访问用户急剧增加的情况下， 或者短时间内反复急剧增加工作负载时能否正常工作； 
以及程序能否从高负荷中恢复并正常工作时常常用到这种测试手法。
【计算公式】
并发数=RPS*响应时间
每日10W交易量： TPS = 100000 * 80% / (10 * 0.2 * 3600)=11.11


服务器监控
【netdata】
-linux系统安装-
curl -Ss 'https://raw.githubusercontent.com/firehol/netdata-demo-site/master/install-required-packages.sh' >/tmp/kickstart.sh && bash /tmp/kickstart.sh -i netdata
git clone https://github.com/netdata/netdata.git
./netdata/netdata-installer.sh
-启用与访问-
To start netdata run: systemctl start netdata
so you can access it with:  http://this.machine.ip:19999/
To stop netdata run:  systemctl stop netdata
-外部访问设置-
添加端口到防火墙： firewall-cmd --add-port=19999/tcp --permanent
重新载入添加端口： firewall-cmd --reload
查询端口是否开启： firewall-cmd --query-port=19999/tcp

【iostat】
终端输入指令：iostat 1 3 #1秒刷新1次，执行3次
Avg-cpu属性值说明：
%user：    CPU处在用户模式下的时间百分比。
%nice：    CPU处在带 NICE 值的用户模式下的时间百分比。
%system：  CPU处在系统模式下的时间百分比。
%iowait：  CPU等待输入输出完成时间的百分比。
%steal：   管理程序维护另一个虚拟处理器时，虚拟 CPU 的无意识等待时间百分比。
%idle：    CPU空闲时间百分比。
Device属性值说明:
tps：      该设备每秒的传输次数
kB_read/s：每秒从设备（drive expressed）读取的数据量；
kB_wrtn/s：每秒向设备（drive expressed）写入的数据量；
kB_read：  读取的总数据量；
kB_wrtn：  写入的总数量数据量；
性能判断:
如果%iowait 的值过高，表示硬盘存在 I/O瓶颈
如果%idle值高，表示CPU较空闲
如果%idle值高但系统响应慢时，可能是CPU等待分配内存，应加大内存容量。
如果%idle值持续低于10，表明CPU 处理能力相对较低，系统中最需要解决的资源是 CPU。

【nmon】推荐
wget https://nchc.dl.sourceforge.net/project/nmon/nmon16d_x86.tar.gz
mkdir nmon16d                                 #创建文件夹
tar -zxvf nmon16d_x86.tar.gz  -C nmon16d      #解压
chmod +x nmon_x86_64_centos7                  #对应系统版本文件，添加执行权限
mv nmon_x86_64_centos7 /usr/local/bin/nmon    #加入环境变量
nmon                                          #运行nmon
nmon -f -T -s 5 -c 12 -m /file_folder         #每隔5秒采集一次,一共采集12次
ps -ef | grep nmon                            #查看运行的nmon进程
kill -9 pid                                   #杀掉进程
https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/Power+Systems/page/nmon_analyser  #下载nmon analyser,打开采集的文件生成报告数据
